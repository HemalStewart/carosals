{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/purnimauyangoda/carosals/src/components/AnimatedCardStack.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport Image from 'next/image'\n\nconst DynamicImageSections = () => {\n  const [currentSection, setCurrentSection] = useState(0)\n  const [selectedImage, setSelectedImage] = useState<number | null>(null)\n  const sectionsRef = useRef<HTMLDivElement[]>([])\n  \n  // Sample images - replace with your actual image URLs\n  const images = [\n    'https://www.dreamworks.com/storage/cms-uploads/the-wild-robot-keyart4.jpg',\n    'https://www.dreamworks.com/storage/cms-uploads/kung-fu-panda-4-he-keyart.jpg',\n    'https://www.dreamworks.com/storage/cms-uploads/OATD_Key%20Art_960x1458.jpg',\n    'https://www.dreamworks.com/storage/cms-uploads/ruby-gillman-teenage-kraken-poster.jpg',\n    'https://www.dreamworks.com/storage/cms-uploads/ruby-gillman-teenage-kraken-poster.jpg',\n    'https://www.dreamworks.com/storage/cms-uploads/ruby-gillman-teenage-kraken-poster.jpg',\n  ]\n\n  // Handle scroll to change sections\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollY = window.scrollY\n      const windowHeight = window.innerHeight\n      \n      if (scrollY < windowHeight) {\n        setCurrentSection(0)\n      } else if (scrollY < windowHeight * 2) {\n        setCurrentSection(1)\n      } else if (scrollY < windowHeight * 3) {\n        setCurrentSection(2)\n      } else {\n        setCurrentSection(3)\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [])\n\n  // Handle image click in carousel\n  const handleCarouselImageClick = (index: number) => {\n    setSelectedImage(index)\n    // Scroll to bottom section\n    window.scrollTo({\n      top: window.innerHeight * 3,\n      behavior: 'smooth'\n    })\n  }\n\n  // Section 1: Stacked Images\n  const StackedSection = () => (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-900 to-slate-800 p-8\">\n      <div className=\"relative w-80 h-96\">\n        {images.slice(0, 4).map((img, index) => (\n          <div\n            key={index}\n            className=\"absolute transition-all duration-1000 ease-out\"\n            style={{\n              transform: `translateX(${index * 8}px) translateY(${index * 8}px) rotate(${index * 2}deg)`,\n              zIndex: images.length - index,\n            }}\n          >\n            <div className=\"w-72 h-80 rounded-lg overflow-hidden shadow-2xl border-4 border-white\">\n              <Image\n                src={img}\n                alt={`Stack ${index}`}\n                width={288}\n                height={320}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n\n  // Section 2: Expanded Grid\n  const ExpandedSection = () => (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-800 to-slate-700 p-8\">\n      <div className=\"grid grid-cols-3 gap-6 max-w-4xl\">\n        {images.map((img, index) => (\n          <div\n            key={index}\n            className=\"group relative overflow-hidden rounded-lg shadow-lg transform transition-all duration-500 hover:scale-105\"\n            style={{\n              animationDelay: `${index * 100}ms`,\n            }}\n          >\n            <div className=\"w-64 h-48 overflow-hidden\">\n              <Image\n                src={img}\n                alt={`Expanded ${index}`}\n                width={256}\n                height={192}\n                className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n              />\n            </div>\n            <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300\"></div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n\n  // Section 3: Carousel\n  const CarouselSection = () => {\n    const [currentIndex, setCurrentIndex] = useState(0)\n    \n    useEffect(() => {\n      const interval = setInterval(() => {\n        setCurrentIndex((prev) => (prev + 1) % images.length)\n      }, 3000)\n      return () => clearInterval(interval)\n    }, [])\n\n    return (\n      <div className=\"min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-slate-700 to-slate-600 p-8\">\n        <div className=\"relative w-full max-w-6xl overflow-hidden\">\n          <div \n            className=\"flex transition-transform duration-700 ease-in-out\"\n            style={{\n              transform: `translateX(-${currentIndex * 320}px)`,\n            }}\n          >\n            {[...images, ...images].map((img, index) => (\n              <div\n                key={index}\n                className=\"flex-shrink-0 w-80 h-60 mx-4 cursor-pointer transform transition-all duration-300 hover:scale-105\"\n                onClick={() => handleCarouselImageClick(index % images.length)}\n              >\n                <div className=\"w-full h-full rounded-lg overflow-hidden shadow-xl border-2 border-white/20\">\n                  <Image\n                    src={img}\n                    alt={`Carousel ${index}`}\n                    width={320}\n                    height={240}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Carousel indicators */}\n        <div className=\"flex space-x-2 mt-8\">\n          {images.map((_, index) => (\n            <button\n              key={index}\n              className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                currentIndex === index ? 'bg-white' : 'bg-white/40'\n              }`}\n              onClick={() => setCurrentIndex(index)}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  // Section 4: Full Screen Expanded\n  const FullScreenSection = () => (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-600 to-slate-900 p-8\">\n      <div className=\"relative max-w-5xl mx-auto\">\n        {selectedImage !== null && (\n          <div className=\"relative\">\n            <div className=\"w-full max-w-4xl mx-auto rounded-2xl overflow-hidden shadow-2xl\">\n              <Image\n                src={images[selectedImage]}\n                alt={`Full Screen ${selectedImage}`}\n                width={1024}\n                height={768}\n                className=\"w-full h-auto object-cover\"\n              />\n            </div>\n            \n            {/* Image navigation */}\n            <div className=\"flex justify-center mt-8 space-x-4\">\n              {images.map((img, index) => (\n                <button\n                  key={index}\n                  className={`w-16 h-12 rounded-lg overflow-hidden border-2 transition-all duration-300 ${\n                    selectedImage === index ? 'border-white scale-110' : 'border-white/40 hover:border-white/80'\n                  }`}\n                  onClick={() => setSelectedImage(index)}\n                >\n                  <Image\n                    src={img}\n                    alt={`Thumb ${index}`}\n                    width={64}\n                    height={48}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {selectedImage === null && (\n          <div className=\"text-center text-white\">\n            <h2 className=\"text-3xl font-bold mb-4\">Click an image from the carousel above</h2>\n            <p className=\"text-xl opacity-70\">Scroll up to interact with the carousel</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"relative\">\n      {/* Section indicators */}\n      <div className=\"fixed right-8 top-1/2 transform -translate-y-1/2 z-50 flex flex-col space-y-4\">\n        {[0, 1, 2, 3].map((section) => (\n          <button\n            key={section}\n            className={`w-4 h-4 rounded-full border-2 transition-all duration-300 ${\n              currentSection === section \n                ? 'bg-white border-white' \n                : 'bg-transparent border-white/50 hover:border-white'\n            }`}\n            onClick={() => {\n              window.scrollTo({\n                top: window.innerHeight * section,\n                behavior: 'smooth'\n              })\n            }}\n          />\n        ))}\n      </div>\n\n      {/* All sections */}\n      <div ref={el => { if (el) sectionsRef.current[0] = el }}>\n        <StackedSection />\n      </div>\n      \n      <div ref={el => { if (el) sectionsRef.current[1] = el }}>\n        <ExpandedSection />\n      </div>\n      \n      <div ref={el => { if (el) sectionsRef.current[2] = el }}>\n        <CarouselSection />\n      </div>\n      \n      <div ref={el => { if (el) sectionsRef.current[3] = el }}>\n        <FullScreenSection />\n      </div>\n\n      {/* Scroll indicator */}\n      <div className=\"fixed bottom-8 left-1/2 transform -translate-x-1/2 text-white text-center z-50\">\n        <div className=\"animate-bounce\">\n          <svg className=\"w-6 h-6 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n          </svg>\n        </div>\n        <p className=\"mt-2 text-sm opacity-70\">\n          {currentSection === 0 && \"Scroll to expand\"}\n          {currentSection === 1 && \"Scroll for carousel\"}\n          {currentSection === 2 && \"Click image to view\"}\n          {currentSection === 3 && \"Full screen view\"}\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default DynamicImageSections"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///Users/purnimauyangoda/carosals/src/app/animated-card-stack/page.tsx"],"sourcesContent":["'use client';\n\nimport  AnimatedCardStack  from \"@/components/AnimatedCardStack\";\n\nexport default function CircleCarouselPage() {\n  return (\n    <AnimatedCardStack />\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBACE,6LAAC,qJAAiB;;;;;AAEtB;KAJwB","debugId":null}}]
}